---
title: "Masting 6 -- Statistical Analysis"
author: "Gleb Kozienko"
date: "2023-07-11"
output: pdf_document
---

Hello future masting researchers
This document contains our initial attempts to statistical analysis. 
Statistical analysis that we focused most of our time on is present in the folder "Statistical analyses for different species"
(~R code/Final RMDs for future research, cleaned/Statistical analyses for different species)

However, some of the methods described here may be worth revisiting.



Upload useful functions
```{r}

library(readr)
library(dplyr)
library(stringr)   
library(tidyverse)
library(lubridate)
library(ggplot2)
library(gridExtra) #allows me to plot multiple graphs together
library(ggpubr) #allows me to plot multiple graphs together

library(Ckmeans.1d.dp)
library(RColorBrewer)

install.packages("EnvStats")
library(EnvStats)

install.packages("infer")
library(infer)

library(lme4)

library(boot)
```

Get your data
```{r}
MASTREE_climate_2 <- read_csv("Desktop/CURI/R code/Mastree datasets/MASTREE_climate_2.csv")
```

Get some more data
```{r}
Picea_species <- MASTREE_climate_1|>
  filter(Alpha_Number=="0234")
```



The provided R code performs data manipulation and filtering on the "mastree_continuous" dataset to create subsets for different tree species. The code then groups and summarizes the data based on the species, alpha number, and length, and prints the top 50 results for each combination. Finally, the code creates separate datasets for each tree species (Fagus, Quercus, Fraxinus, Picea, and Pinus) using the filtered data
```{r}
# Filter "mastree_continuous" dataset to get only continuous variables with Unit not equal to "index"
mastree_continuous <- MASTREE_climate_2 |>
  filter(VarType == "C", Unit != "index")

# Get unique species from the "mastree_continuous" dataset
all_species <- mastree_continuous$Species |> unique()

# Group and summarize the "mastree_continuous" data based on Species, Alpha_Number, and Length,
# and print the top 50 results sorted by Length in descending order
mastree_continuous |>
  group_by(Species, Alpha_Number, Length) |>
  summarise(n = n()) |>
  arrange(desc(Length)) |>
  print(n = 50)

# Filter unique species to get those containing "Fagus" in their name
fagus <- all_species[str_detect(all_species, "Fagus")]

# Filter unique species to get those containing "Quercus" in their name
quercus <- all_species[str_detect(all_species, "Quercus")]

# Filter unique species to get those containing "Fraxinus" in their name
fraxinus <- all_species[str_detect(all_species, "Fraxinus")]

# Filter unique species to get those containing "Picea" in their name
picea <- all_species[str_detect(all_species, "Picea")]

# Filter unique species to get those containing "Pinus" in their name
pinus <- all_species[str_detect(all_species, "Pinus")]

# Create subsets for each tree species based on the filtered unique species
fagus_data <- mastree_continuous |>
  filter(Species %in% fagus)

quercus_data <- mastree_continuous |>
  filter(Species %in% quercus)

fraxinus_data <- mastree_continuous |>
  filter(Species %in% fraxinus)

picea_data <- mastree_continuous |>
  filter(Species %in% picea)

pinus_data <- mastree_continuous|>
  filter(Species %in% pinus)



# Group and summarize the "fagus_data" dataset based on Coords, Alpha_Number, and Species,
# calculate the count (n) for each group, and print the top 25 results sorted by count in descending order.
fagus_data |>
  group_by(Coords, Alpha_Number, Species) |>
  summarise(n = n()) |>
  arrange(desc(n)) |>
  print(n = 25)


quercus_data|>
  group_by(Coords, Alpha_Number, Species)|>
  summarise(n=n())|>
  arrange(desc(n))|>
  print(n=25)

fraxinus_data|>
  group_by(Coords, Alpha_Number, Species)|>
  summarise(n=n())|>
  arrange(desc(n))|>
  print(n=25)

picea_data|>
  group_by(Coords, Alpha_Number, Species)|>
  summarise(n=n())|>
  arrange(desc(n))|>
  print(n=25)

pinus_data|>
  group_by(Coords, Alpha_Number, Species)|>
  summarise(n=n())|>
  arrange(desc(n))|>
  print(n=25)
```

The provided R code creates different subsets of data for specific tree species and locations from the previously filtered datasets. Each subset corresponds to a specific species and location identified by "Coords" and "Alpha_Number" values.
```{r}
# Create a subset for Fagus sylvatica at Coords "49, 11.4" and Alpha_Number "3024" from fagus_data
fagus_sylvatica_at_49_11.4_from_3024 <- fagus_data |>
  filter(Coords == "49, 11.4", Alpha_Number == "3024")

# Create a subset for Fagus sylvatica at Coords "49.8, 22.2" and Alpha_Number "6013" from fagus_data
fagus_sylvatica_at_49.8_22.2_from_6013 <- fagus_data |>
  filter(Coords == "49.8, 22.2", Alpha_Number == "6013")

# Create a subset for Quercus chapmanii at Coords "27.2, -81.3", Alpha_Number "5001" from quercus_data
quercus_chapmanii_at_27.2_minus81.3_from_5001 <- quercus_data |>
  filter(Coords == "27.2, -81.3", Alpha_Number == "5001", Species == "Quercus chapmanii")

# Create a subset for Quercus geminata at Coords "27.2, -81.3", Alpha_Number "5001" from quercus_data
quercus_geminata_at_27.2_minus81.3_from_5001 <- quercus_data |>
  filter(Coords == "27.2, -81.3", Alpha_Number == "5001", Species == "Quercus geminata")

# Create a subset for Picea engelmannii at Coords "39.9, -105.9", Alpha_Number "0234" from picea_data
picea_engelmannii_at_39.9_minus105.9_from_0234 <- picea_data |>
  filter(Coords == "39.9, -105.9", Alpha_Number == "0234")

# Create a subset for Picea glauca at Coords "64.7, -148.3", Alpha_Number "5071" from picea_data
picea_glauca_at_64.7_minus148.3_from_5071 <- picea_data |>
  filter(Coords == "64.7, -148.3", Alpha_Number == "5071")

# Create a subset for Picea abies at Coords "49.8, 22.2", Alpha_Number "6013" from picea_data
picea_abies_at_49.8_22.2_from_6013 <- picea_data |>
  filter(Coords == "49.8, 22.2", Alpha_Number == "6013")

# Create a subset for Pinus mugo at Coords "50.1, 17.2", Alpha_Number "2552" from pinus_data
pinus_mugo_at_50.1_17.2_from_2552 <- pinus_data |>
  filter(Coords == "50.1, 17.2", Alpha_Number == "2552")

# Create a subset for Pinus sylvestris at Coords "49.8, 22.2", Alpha_Number "6013" from pinus_data
pinus_sylvestris_at_49.8_22.2_from_6013 <- pinus_data |>
  filter(Coords == "49.8, 22.2", Alpha_Number == "6013")

```




Threshold function.
We decided to use ADM method to determine mast years.
Reasons to pick ADM method: it's relatively simple, it seem to work 
(i.e. it might not be the best method)


For detailed description of this method and commented code, see "masting4 -- define mast years, compute mast periods -- final.Rmd"
Briefly: this function generates threshold that separates seed production values as mast and non-mast.
```{r}
#ACHTUNG:THIS FUNCTION REQUIRES THAT THERE IS ONLY ONE ROW PER YEAR
ADM_vec <- function(seed_prod_vals) {
  mean <- mean(seed_prod_vals)
  abs_val_diff <- abs(seed_prod_vals - mean)
  sum <- sum(abs_val_diff)
  n <- length(seed_prod_vals)
  result <- mean + sum / n
  return(result)
}
```

Briefly: this function generates threshold that separates seed production values as mast and non-mast based on the threshold value, and then creates column with "mast" and "nonmast" labels.
```{r}
#according to profs. suggestion, this function uses same threshold computed across all sites rather than individual thresholds for each site. 
#If you need one site only, first supply all sites into function and then filter the outcome

ADM_funct <- function(Dataset) {
  same_month_only_data <- Dataset |>
    filter(month == 1)
  
  vals_unique <- same_month_only_data$Value
  
  treshold <- ADM_vec(vals_unique)
  
  mast_boolean <- Dataset$Value > treshold
  
  mast_val <- rep(NA, length(mast_boolean))
  
  
  for (i in 1:length(mast_boolean)) {
    if (mast_boolean[i] == TRUE) {
      mast_val[i] <- "mast year"
    } else {
      mast_val[i] <- "non-mast year"
    }
  }
  
  Dataset$mast_val <- mast_val
  
  
  return(Dataset)
}

```














INITIAL STATISTICAL ANALYSIS


I)Inference for comparing two independent means
Our first statistical idea was to divide years into mast years and nonmast years, and compare means of explanatory variables(climatic vartiables in our case) between these groups.


 For reference, see  https://openintro-ims.netlify.app/inference-two-means.html#inference-two-means


1)Permutations 
One of the ways to conduct iference for comparing two independent means is to use permutations (it generates the distribution of mean differences under the assumption that response and explanatory variables are not correlated[null hypothesis], and uses this distribution to assess p-value for actual difference in proportions)

(This method is opposed to usage of T-score/t-distribution, i.e. mathematical model, which is not really appropriate here, because conditions to use math model are not met )
```{r}

#  Label years from 'picea_engelmannii_at_39.9_minus105.9_from_0234' as mast or non_mast using the ADM_funct() .
# Then, filter the resulting data to keep only rows where 'month' is equal to 6. (thus setting the explanatory variable of interest, namely, temperature in June)
picea_engel_ADM_thresh_certain_month <- picea_engelmannii_at_39.9_minus105.9_from_0234 |>
  ADM_funct() |>
  filter(month == 6)

# Filter the 'picea_engel_ADM_thresh_certain_month' data frame to keep only non-mast years
picea_engel_ADM_thresh_certain_month_nonmast <- picea_engel_ADM_thresh_certain_month |>
  filter(mast_val == "non-mast year")

# Filter the 'picea_engel_ADM_thresh_certain_month' data frame to keep only mast years
picea_engel_ADM_thresh_certain_month_mast <- picea_engel_ADM_thresh_certain_month |>
  filter(mast_val == "mast year")

# Create a box plot using ggplot for the 'picea_engel_ADM_thresh_certain_month' data frame, with 'mast_val' on the x-axis and 'temp_2m' on the y-axis.
ggplot(picea_engel_ADM_thresh_certain_month, aes(x = mast_val, y = temp_2m)) +
  geom_boxplot()


# Perform a permutation test to compare the means of 'temp_2m' between "mast year" and "non-mast year" groups.
# The permutation test uses twoSamplePermutationTestLocation() function with 10000 permutations and a specified seed for reproducibility.
perm_out <- twoSamplePermutationTestLocation(
  x = picea_engel_ADM_thresh_certain_month_nonmast$temp_2m, 
  y = picea_engel_ADM_thresh_certain_month_mast$temp_2m, 
  fcn = 'mean',
  alternative = 'two.sided',
  mu1.minus.mu2 = 0,
  paired = FALSE,
  exact = FALSE,
  n.permutations = 10000,
  seed = 228
)



# Access the p-value from the permutation test.
perm_out$p.value



#we also conduct t-test here so one can compare results from permutation test and t-test 

# Perform a two-sample t-test to compare the means of 'temp_2m' between "mast year" and "non-mast year" groups in the 'picea_engel_ADM_thresh_certain_month' data frame.
ttest <- t.test(temp_2m ~ mast_val, data = picea_engel_ADM_thresh_certain_month, alternative = "two.sided")


# Access the p-value from the t-test.
ttest$p.value



```




2) t-test
 For reference, see  https://openintro-ims.netlify.app/inference-two-means.html#inference-two-means

(it is not really appropriate here, because conditions to use math model are not met)
```{r}
#  Label years from 'fagus_sylvatica_at_49.8_22.2_from_6013' as mast or non_mast using the ADM_funct() .
# Then, filter the resulting data to keep only rows where 'month' is equal to 6. (thus setting the explanatory variable of interest, namely, temperature in June)
fagus_sylv_ADM_thresh_certain_month<-fagus_sylvatica_at_49.8_22.2_from_6013|>
  ADM_funct()|>
  filter(month==6)
  

# Perform a two-sample t-test to compare the means of 'temp_2m' between "mast year" and "non-mast year" groups
  ttest2<-t.test(temp_2m ~ mast_val, data = fagus_sylv_ADM_thresh_certain_month, alternative = "two.sided")
  
  # Access the p-value from the t-test.
  ttest2$p.value
```










II) Seem to be an attempt to Fit Linear Mixed-Effects model
For reference, see:  https://cran.r-project.org/web/packages/lme4/vignettes/lmer.pdf

We could not make it work mainly because we could not figure out the statistics behind lmer() function (i.e. we were not completely sure what exactly we are doing here  :-/   )



```{r}
#  Label years from 'picea_engelmannii_at_39.9_minus105.9_from_0234' as mast or non_mast using the ADM_funct() .
# Then, filter the resulting data to keep only rows where 'month' is equal to 6. (thus setting the explanatory variable of interest, namely, temperature in June)
picea_engel_ADM_thresh_certain_month <- picea_engelmannii_at_39.9_minus105.9_from_0234 |>
  ADM_funct() |>
  filter(month == 6)





#Since we were not completely sure what exactly we are doing here, we tried three different combinations if imputs:


#1) Fit a linear mixed-effects model (LMM) using lmer to predict 'temp_2m' based on 'Value', with random intercepts for 'Year' and 'Site_number'.
test1 <- lmer(temp_2m ~ Value + (1|Year) + (1|Site_number), data = picea_engel_ADM_thresh_certain_month)

# Display the summary of the LMM 'test1'.
summary(test1)

#2) Fit a linear mixed-effects model (LMM) using lmer to predict 'temp_2m' based on 'Value', with random intercepts for 'Year' only.
test2 <- lmer(temp_2m ~ Value + (1|Year), data = picea_engel_ADM_thresh_certain_month)

# Display the summary of the LMM 'test2'.
summary(test2)

# Fit a linear mixed-effects model (LMM) using lmer to predict 'temp_2m' based on 'Value', with random intercepts for 'Site_number' only.
test3 <- lmer(temp_2m ~ Value + (1|Site_number), data = picea_engel_ADM_thresh_certain_month)

# Display the summary of the LMM 'test3'.
summary(test3)



```




III) binary logistic regression (beginning of it)
Binary logistic regression is used when the response variable is categorical with two levels (often coded as 0 and 1) and the explanatory variable(s) are continuous.

This approach is somewhat similar to inference for comparing two independent means, but uses linear regression instead of t-distribution

```{r}
# Create a new data frame 'picea_engel_ADM_thresh_certain_month2' based on 'picea_engel_ADM_thresh_certain_month'.
# Add a new variable 'mast_val2', which takes the value 1 if 'mast_val' is "mast year", and 0 otherwise.
picea_engel_ADM_thresh_certain_month2 <- picea_engel_ADM_thresh_certain_month |>
  mutate(mast_val2 = ifelse(mast_val == "mast year", 1, 0))

# Create a scatter plot using ggplot for the 'picea_engel_ADM_thresh_certain_month2' data frame.
# Map 'temp_2m' to the x-axis and 'mast_val2' to the y-axis.
ggplot(picea_engel_ADM_thresh_certain_month2, aes(x = temp_2m, y = mast_val2)) +
  # Add data points to the plot.
  geom_point() +
  # Add a linear regression line to the plot using geom_smooth.
  geom_smooth(method = "lm")

```

